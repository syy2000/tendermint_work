// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tendermint/types/txBlock.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	crypto "github.com/tendermint/tendermint/proto/tendermint/crypto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PoHBlock struct {
	Height        int64           `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	PoHTimestamps []*PoHTimestamp `protobuf:"bytes,2,rep,name=poHTimestamps,proto3" json:"poHTimestamps,omitempty"`
	Signature     []byte          `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *PoHBlock) Reset()         { *m = PoHBlock{} }
func (m *PoHBlock) String() string { return proto.CompactTextString(m) }
func (*PoHBlock) ProtoMessage()    {}
func (*PoHBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_09a99439714e6ae8, []int{0}
}
func (m *PoHBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoHBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoHBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoHBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoHBlock.Merge(m, src)
}
func (m *PoHBlock) XXX_Size() int {
	return m.Size()
}
func (m *PoHBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_PoHBlock.DiscardUnknown(m)
}

var xxx_messageInfo_PoHBlock proto.InternalMessageInfo

func (m *PoHBlock) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *PoHBlock) GetPoHTimestamps() []*PoHTimestamp {
	if m != nil {
		return m.PoHTimestamps
	}
	return nil
}

func (m *PoHBlock) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type PoHBlockPart struct {
	Height int64         `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Total  uint32        `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Index  uint32        `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Bytes  []byte        `protobuf:"bytes,4,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Proof  *crypto.Proof `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *PoHBlockPart) Reset()         { *m = PoHBlockPart{} }
func (m *PoHBlockPart) String() string { return proto.CompactTextString(m) }
func (*PoHBlockPart) ProtoMessage()    {}
func (*PoHBlockPart) Descriptor() ([]byte, []int) {
	return fileDescriptor_09a99439714e6ae8, []int{1}
}
func (m *PoHBlockPart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoHBlockPart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoHBlockPart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoHBlockPart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoHBlockPart.Merge(m, src)
}
func (m *PoHBlockPart) XXX_Size() int {
	return m.Size()
}
func (m *PoHBlockPart) XXX_DiscardUnknown() {
	xxx_messageInfo_PoHBlockPart.DiscardUnknown(m)
}

var xxx_messageInfo_PoHBlockPart proto.InternalMessageInfo

func (m *PoHBlockPart) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *PoHBlockPart) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *PoHBlockPart) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *PoHBlockPart) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func (m *PoHBlockPart) GetProof() *crypto.Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func init() {
	proto.RegisterType((*PoHBlock)(nil), "tendermint.types.PoHBlock")
	proto.RegisterType((*PoHBlockPart)(nil), "tendermint.types.PoHBlockPart")
}

func init() { proto.RegisterFile("tendermint/types/txBlock.proto", fileDescriptor_09a99439714e6ae8) }

var fileDescriptor_09a99439714e6ae8 = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0xad, 0xdb, 0xaf, 0xd5, 0x87, 0xdb, 0x4a, 0x28, 0x42, 0xc8, 0xaa, 0xc0, 0x8a, 0x3a, 0x65,
	0x72, 0xa4, 0x32, 0xb0, 0x57, 0x0c, 0x1d, 0x83, 0xc5, 0xc4, 0x96, 0xb6, 0xa6, 0xb1, 0x68, 0x62,
	0xcb, 0xb9, 0x95, 0x9a, 0x17, 0x60, 0x66, 0xe4, 0x91, 0x18, 0x3b, 0x32, 0xa2, 0xe4, 0x45, 0x50,
	0x6c, 0x20, 0xa1, 0x82, 0xcd, 0xe7, 0x9c, 0xfb, 0x73, 0x7c, 0x2e, 0xa6, 0x20, 0xb2, 0xb5, 0x30,
	0xa9, 0xcc, 0x20, 0x84, 0x42, 0x8b, 0x3c, 0x84, 0xfd, 0x7c, 0xab, 0x56, 0x8f, 0x4c, 0x1b, 0x05,
	0xca, 0x3b, 0x6d, 0x74, 0x66, 0xf5, 0xc9, 0xf4, 0x97, 0x8e, 0x3b, 0x99, 0x8a, 0x1c, 0xe2, 0x54,
	0xbb, 0xae, 0xc9, 0x65, 0xab, 0x66, 0x65, 0x0a, 0x0d, 0x2a, 0xd4, 0x46, 0xa9, 0x07, 0x27, 0x4f,
	0x9f, 0x10, 0xfe, 0x1f, 0xa9, 0x85, 0xdd, 0xe3, 0x9d, 0xe3, 0x41, 0x22, 0xe4, 0x26, 0x01, 0x82,
	0x7c, 0x14, 0xf4, 0xf8, 0x27, 0xf2, 0x6e, 0xf0, 0x58, 0xab, 0xc5, 0xf7, 0xe4, 0x9c, 0x74, 0xfd,
	0x5e, 0x30, 0x9c, 0x51, 0x76, 0xec, 0x88, 0x45, 0xad, 0x32, 0xfe, 0xb3, 0xc9, 0xbb, 0xc0, 0x27,
	0xb9, 0xdc, 0x64, 0x31, 0xec, 0x8c, 0x20, 0x3d, 0x1f, 0x05, 0x23, 0xde, 0x10, 0xd3, 0x17, 0x84,
	0x47, 0x5f, 0x46, 0xa2, 0xd8, 0xc0, 0x9f, 0x66, 0xce, 0x70, 0x1f, 0x14, 0xc4, 0x5b, 0xd2, 0xf5,
	0x51, 0x30, 0xe6, 0x0e, 0xd4, 0xac, 0xcc, 0xd6, 0x62, 0x6f, 0x07, 0x8f, 0xb9, 0x03, 0x35, 0xbb,
	0x2c, 0x40, 0xe4, 0xe4, 0x9f, 0x5d, 0xe7, 0x80, 0xc7, 0x70, 0xdf, 0x46, 0x40, 0xfa, 0x3e, 0x0a,
	0x86, 0x33, 0xd2, 0xfe, 0x86, 0x8b, 0x88, 0x45, 0xb5, 0xce, 0x5d, 0xd9, 0xfc, 0xf6, 0xb5, 0xa4,
	0xe8, 0x50, 0x52, 0xf4, 0x5e, 0x52, 0xf4, 0x5c, 0xd1, 0xce, 0xa1, 0xa2, 0x9d, 0xb7, 0x8a, 0x76,
	0xee, 0xaf, 0x37, 0x12, 0x92, 0xdd, 0x92, 0xad, 0x54, 0x1a, 0xb6, 0x6f, 0xd1, 0x3c, 0x6d, 0xca,
	0xe1, 0xf1, 0x9d, 0x96, 0x03, 0xcb, 0x5f, 0x7d, 0x04, 0x00, 0x00, 0xff, 0xff, 0x54, 0xf8, 0xae,
	0x31, 0xf4, 0x01, 0x00, 0x00,
}

func (m *PoHBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoHBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoHBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTxBlock(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PoHTimestamps) > 0 {
		for iNdEx := len(m.PoHTimestamps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoHTimestamps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTxBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Height != 0 {
		i = encodeVarintTxBlock(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoHBlockPart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoHBlockPart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoHBlockPart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Bytes) > 0 {
		i -= len(m.Bytes)
		copy(dAtA[i:], m.Bytes)
		i = encodeVarintTxBlock(dAtA, i, uint64(len(m.Bytes)))
		i--
		dAtA[i] = 0x22
	}
	if m.Index != 0 {
		i = encodeVarintTxBlock(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if m.Total != 0 {
		i = encodeVarintTxBlock(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintTxBlock(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxBlock(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxBlock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PoHBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovTxBlock(uint64(m.Height))
	}
	if len(m.PoHTimestamps) > 0 {
		for _, e := range m.PoHTimestamps {
			l = e.Size()
			n += 1 + l + sovTxBlock(uint64(l))
		}
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTxBlock(uint64(l))
	}
	return n
}

func (m *PoHBlockPart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovTxBlock(uint64(m.Height))
	}
	if m.Total != 0 {
		n += 1 + sovTxBlock(uint64(m.Total))
	}
	if m.Index != 0 {
		n += 1 + sovTxBlock(uint64(m.Index))
	}
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovTxBlock(uint64(l))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovTxBlock(uint64(l))
	}
	return n
}

func sovTxBlock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxBlock(x uint64) (n int) {
	return sovTxBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PoHBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoHBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoHBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoHTimestamps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoHTimestamps = append(m.PoHTimestamps, &PoHTimestamp{})
			if err := m.PoHTimestamps[len(m.PoHTimestamps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoHBlockPart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoHBlockPart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoHBlockPart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = append(m.Bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytes == nil {
				m.Bytes = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &crypto.Proof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxBlock
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxBlock
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxBlock
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxBlock        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxBlock          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxBlock = fmt.Errorf("proto: unexpected end of group")
)
